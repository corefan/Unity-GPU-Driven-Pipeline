// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CullMain
#pragma kernel Clear
#define COMPUTESHADER
#include "CGINC/Procedural.cginc"
float4 planes[PLANECOUNT];
struct ObjectInfo
{
    float3 extent;
    float3 position;
};
RWStructuredBuffer<ObjectInfo> clusterBuffer;
RWStructuredBuffer<uint> instanceCountBuffer;
RWStructuredBuffer<uint> resultBuffer;

float PlaneTest(ObjectInfo info){
    float3 position = info.position;
    float3 extent = info.extent;
    float result = 1;
    [unroll]
    for(int i = 0; i < PLANECOUNT; ++i)
    {
        float4 plane = planes[i];
        float r = dot(position, plane.xyz); 
        float3 absNormal = abs(plane.xyz);
        float f = dot(absNormal, extent);
        result *= ((r - f) < -plane.w) ? 1.0 : 0.0;
    }
    return result;
}

uint _Count;
[numthreads(64, 1, 1)]
void CullMain (uint id : SV_DISPATCHTHREADID)
{
    if(id > _Count)
    {
        return;
    }
    ObjectInfo currentObject = clusterBuffer[id];
    float result =  PlaneTest(currentObject);
    if(result > 0.5){
        int currentIndex;
        InterlockedAdd(instanceCountBuffer[1], 1, currentIndex);
        resultBuffer[currentIndex] = id;
    }
}
[numthreads(1,1,1)]
void Clear(uint id : SV_DISPATCHTHREADID)
{
    instanceCountBuffer[0] = CLUSTERVERTEXCOUNT;
    instanceCountBuffer[1] = 0;
    instanceCountBuffer[2] = 0;
    instanceCountBuffer[3] = 0;
    instanceCountBuffer[4] = 0;
}